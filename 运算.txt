补码:正数不变，负数，符号位不变，其它取反，加1
在计算机程序中，数据的位是可以操作的最小数据单位，理论上可以用“位运算”来完成所有的运算和操作。

一般的位操作是用来控制硬件的，或者做数据变换使用，但是，灵活的位操作可以有效地提高程序运行的效率。C语言提供了位运算的功能， 这使得C语言也能像汇编语言一样用来编写系统程序。

位运算符C语言提供了六种位运算符：

　& 按位与
　　| 按位或
　　^ 按位异或
　　~ 取反
　　<< 左移
　　>> 右移

1. 按位与运算

按位与运算符"&"是双目运算符。其功能是参与运算的两数各对应的二进位相与。只有对应的两个二进位均为1时，结果位才为1 ，否则为0。参与运算的数以补码方式出现。

例如：9&5可写算式如下： 00001001 (9的二进制补码)&00000101 (5的二进制补码)　00000001 (1的二进制补码)可见9&5=1。

按位与运算通常用来对某些位清0或保留某些位。例如把a 的高八位清 0 ， 保留低八位， 可作 a&255 运算 ( 255 的二进制数为0000000011111111)。

应用：

a. 清零特定位 (mask中特定位置0，其它位为1，s=s&mask)

b. 取某数中指定位 (mask中特定位置1，其它位为0，s=s&mask)

2. 按位或运算

按位或运算符“|”是双目运算符。其功能是参与运算的两数各对应的二进位相或。只要对应的二个二进位有一个为1时，结果位就为1。参与运算的两个数均以补码出现。

例如：9|5可写算式如下：

00001001|00000101

00001101 (十进制为13)可见9|5=13

应用：

常用来将源操作数某些位置1，其它位不变。 (mask中特定位置1，其它位为0 s=s|mask)

3. 按位异或运算

按位异或运算符“^”是双目运算符。其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。参与运算数仍以补码出现，例如9^5可写成算式如下：

00001001^00000101 00001100 (十进制为12)

应用：

a. 使特定位的值取反 (mask中特定位置1，其它位为0 s=s^mask)

b. 不引入第三变量，交换两个变量的值 (设 a=a1,b=b1)

目 标 操 作 操作后状态
　　a=a1^b1 a=a^b a=a1^b1,b=b1
　　b=a1^b1^b1 b=a^b a=a1^b1,b=a1
　　a=b1^a1^a1 a=a^b a=b1,b=a1

4. 求反运算

求反运算符～为单目运算符，具有右结合性。 其功能是对参与运算的数的各二进位按位求反。例如～9的运算为： ~(0000000000001001)结果为：1111111111110110

5. 左移运算

左移运算符“<<”是双目运算符。其功能把“<< ”左边的运算数的各二进位全部左移若干位，由“<<”右边的数指定移动的位数， 高位丢弃，低位补0。 其值相当于乘2。例如： a<<4 指把a的各二进位向左移动4位。如a=00000011(十进制3)，左移4位后为00110000(十进制48)。

6. 右移运算

右移运算符“>>”是双目运算符。其功能是把“>> ”左边的运算数的各二进位全部右移若干位，“>>”右边的数指定移动的位数。其值相当于除2。

例如：设 a=15，a>>2　表示把000001111右移为00000011(十进制3)。对于左边移出的空位，如果是正数则空位补0，若为负数，可能补0或补1，这取决于所用的计算机系统。移入0的叫逻辑右移，移入1的叫算术右移，Turbo C采用逻辑右移。

　　main(){
　　　unsigned a,b;
　　　printf("input a number: ");
　　　scanf("%d",&a);
　　　b=a>>5;
　　　b=b&15;
　　　printf("a=%d b=%d ",a,b);
　　}

再看一例:

　　main(){
　　　char a='a',b='b';
　　　int p,c,d;
　　　p=a;
　　　p=(p<<8)|b;
　　　d=p&0xff;
　　　c=(p&0xff00)>>8;
　　　printf("a=%d b=%d c=%d d=%d ",a,b,c,d);
　　}

浮点数的存储格式：

浮点数的存储格式是符号+阶码(定点整数)+尾数(定点小数)

　　SEEEEEEEEMMMMMMMMMMMMMMMMMMMMMMM
　　即1位符号位(0为正，1为负），8位指数位，23位尾数位
　　浮点数存储前先转化成2的k次方形式，即：
　　f = A1*2^k + A2*2^(k-1) + ... + Ak +... +An*2^(-m) (Ai = {0, 1}, A1 = 1)
　　如5.5=2^2 + 2^0 + 2^(-1)
　　其中的k就是指数，加127后组成8位指数位
　　5.5的指数位就是2+127 = 129 = 10000001
　　A2A3.....An就是尾数位，不足23位后补0
　　所以5.5 = 01000000101000000000000000000000 = 40A00000
　　所以，对浮点数*2、/2只要对8位符号位+、- 即可，但不是左移、右移

关于unsigned int 和 int 的在位运算上的不同，下面有个CU上的例子描述的很清楚：

[问题]：这个函数有什么问题吗？

　/**
　　* 本函数将两个16比特位的值连结成为一个32比特位的值。
　　* 参数：sHighBits 高16位
　　* sLowBits 低16位
　　* 返回：32位值
　　**/
　　long CatenateBits16(short sHighBits, short sLowBits)
　　{
　　long lResult = 0; /* 32位值的临时变量*/

　/* 将第一个16位值放入32位值的高16位 */
　　lResult = sHighBits;
　　lResult <<= 16;

　/* 清除32位值的低16位 */
　　lResult &= 0xFFFF0000;

　/* 将第二个16位值放入32位值的低16位 */
　　lResult |= (long)sLowBits;

　　return lResult;
　　}
　　/////////////////////////////////////////////////

[问题的发现]：

我们先看如下测试代码：

　/////////////////////////////////////////////////
　　int main()
　　{
　　short sHighBits1 = 0x7fff;
　　short sHighBits2 = 0x8f12;
　　unsigned short usHighBits3 = 0xff12;
　　short sLowBits1 = 0x7bcd;
　　long lResult = 0;

　　printf("[sHighBits1 + sLowBits1] ";

　lResult = CatenateBits16(sHighBits1, sLowBits1);
　　printf("lResult = %08x ", lResult, lResult);

　lResult = CatenateBits16(sHighBits2, sLowBits1);
　　printf("lResult = %08x ", lResult, lResult);

　lResult = CatenateBits16(usHighBits3, sLowBits1);
　　printf("lResult = %08x ", lResult, lResult);
　　}
　　/////////////////////////////////////////////////

运行结果为：

　[sHighBits1 + sLowBits1]
　　lResult = 7fff7bcd
　　lResult = 8f127bcd
　　lResult = ff127bcd

嗯，运行很正确嘛……于是我们就放心的在自己的程序中使用起这个函数来了。

可是忽然有一天，我们的一个程序无论如何结果都不对！经过n个小时的检查和调试，最后终于追踪到……CatenateBits16() ！？它的返回值居然是错的！！

“郁闷！”你说，“这个函数怎么会有问题呢！？”

可是，更郁闷的还在后头呢，因为你把程序中的输入量作为参数，在一个简单的main()里面单步调试：

　/////////////////////////////////////////////////
　　int main()
　　{
　　short sHighBits1 = 0x7FFF;
　　short sHighBits2 = 0x8F12;
　　unsigned short usHighBits3 = 0x8F12;

　short sLowBits1 = 0x7BCD; //你实际使用的参数
　　short sLowBits2 = 0x8BCD; //你实际使用的参数

　long lResult = 0;

　printf("[sHighBits1 + sLowBits1] ";

　lResult = CatenateBits16(sHighBits1, sLowBits1);
　　printf("lResult = %08x ", lResult, lResult);

　lResult = CatenateBits16(sHighBits2, sLowBits1);
　　printf("lResult = %08x ", lResult, lResult);

　lResult = CatenateBits16(usHighBits3, sLowBits1);
　　printf("lResult = %08x ", lResult, lResult);

　printf(" [sHighBits1 + sLowBits2] ";

　lResult = CatenateBits16(sHighBits1, sLowBits2);
　　printf("lResult = %08x ", lResult, lResult);

　lResult = CatenateBits16(sHighBits2, sLowBits2);
　　printf("lResult = %08x ", lResult, lResult);

　lResult = CatenateBits16(usHighBits3, sLowBits2);
　　printf("lResult = %08x ", lResult, lResult);

　return 0;
　　}
　　/////////////////////////////////////////////////

发现结果竟然是：

　[sHighBits1 + sLowBits1]
　　lResult = 7fff7bcd
　　lResult = 8f127bcd
　　lResult = 8f127bcd

　[sHighBits1 + sLowBits2]
　　lResult = ffff8bcd //oops!
　　lResult = ffff8bcd //oops!
　　lResult = ffff8bcd //oops!

前一次还好好的，后一次就ffff了？X档案？

[X档案的真相]：

注意那两个我们用来当作低16位值的sLowBits1和sLowBits2。

已知：
　　使用 sLowBits1 = 0x7bcd 时，函数返回正确的值；
　　使用 sLowBits2 = 0x8bcd 时，函数中发生X档案。

那么，sLowBits1与sLowBits2有什么区别？

注意了，sLowBits1和sLowBits2都是short型（而不是unsigned short），所以在这里，sLowBits1代表一个正数值，而sLowBits2却代表了一个负数值（因为8即是二进制1000，sLowBits2最高位是1）。
　
　再看CatenateBits16()函数：

　/////////////////////////////////////////////////
　　long CatenateBits16(short sHighBits, short sLowBits)
　　{
　　long lResult = 0; /* 32位值的临时变量*/

/* 将第一个16位值放入32位值的高16位 */
　　lResult = sHighBits;
　　lResult <<= 16;

/* 清除32位值的低16位 */
　　lResult &= 0xFFFF0000;

/* 将第二个16位值放入32位值的低16位 */
　　lResult |= (long)sLowBits; //注意这一句！！！！

　return lResult;
　　}
　/////////////////////////////////////////////////

如果我们在函数中用

printf("sLowBits = %04x ", sLowBits);
　
　打印传入的sLowBits值，会发现

sLowBits = 0x7bcd 时，打印结果为

sLowBits = 7bcd

而sLowBits = 0x8bcd时，打印结果为

sLowBits = ffff8bcd

是的，即使用%04x也打印出8位十六进制。

因此，我们看出来了：

当sLowBits = 0x8bcd时，函数中 "lResult |= (long)sLowBits;" 这一句执行，会先将sLowBits转换为

0xffff8bcd

再与lResult做或运算。由于现在lResult的值为 0xXXXX0000 （其中XXXX是任何值），所以显然，无论sHighBits是什么值，最后结果都会是

　0xffff8bcd

而当sLowBits = 0x7bcd时，函数中 "lResult |= (long)sLowBits;" 这一句执行，会先将sLowBits转换为

　0x00007bcd

再与lResult做或运算。这样做或运算出来的结果当然就是对的。

也就是说，CatenateBits16()在sLowBits的最高位为0的时候表现正常，而在最高位为1的时候出现偏差。

[教训：在某些情况下作位运算和位处理的时候，考虑使用无符号数值——因为这个时候往往不需要处理符号。即使你需要的有符号的数值，那么也应该考虑自行在调用CatenateBits16()前后做转换——毕竟在位处理中，有符号数值相当诡异！

下面这个CatenateBits16()版本应该会好一些：

　/////////////////////////////////////////////////

　unsigned long CatenateBits16(unsigned short sHighBits, unsigned short sLowBits)

　{
　　long lResult = 0;

　/* 将第一个16位值放入32位值的高16位 */
　　lResult = sHighBits;
　　lResult <<= 16;

　/* 清除32位值的低16位 */
　　lResult &= 0xFFFF0000;

　/* 将第二个16位值放入32位值的低16位 */
　　lResult |= (long)sLowBits & 0x0000FFFF;

　　return lResult;
　　}
　　/////////////////////////////////////////////////

注意其中的 "lResult |= (long)sLowBits & 0x0000FFFF;"。事实上，现在即使我们把CatenateBits16()函数的参数（特别是sLowBits）声明为short，结果也会是对的。

如果有一天你把一只兔子扔给一只老虎，老虎把兔子吃了，第二天把一只老鼠扔给它，它又吃了，那么说明第一天你看错了：它本来就是一只猫。